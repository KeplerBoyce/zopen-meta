#!/bin/sh
#
# Audit utility for z/OS Open Tools - https://github.com/ZOSOpenTools
#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself

printHelp()
{
  cat << HELPDOC
${ME} is a utility for z/OS Open Tools to check for vulnerabilities
in your installed packages.

Usage: ${ME} [OPTION]

Options:
  -v, --verbose     run in verbose mode.
  --version         print version.
  --try-resolve     attempt to resolve vulnerabilities by upgrading packages.

Examples:
  zopen audit       check for vulnerabilities in all installed packages

Report bugs at https://github.com/ZOSOpenTools/meta/issues.

HELPDOC
}

# Main code start here
args=$*
verbose=false
debug=false
try_resolve=false

while [ $# -gt 0 ]; do
  printVerbose "Parsing option: $1"
  case "$1" in
  "-h" | "--help" | "-?")
    printHelp "${args}"
    exit 0
    ;;
  "--version")
    zopen-version ${ME}
    exit 0
    ;;
  "-v" | "--verbose")
    verbose=true
    ;;
  "--try-resolve")
    try_resolve=true
    ;;
  "--debug")
    # shellcheck disable=SC2034
    verbose=true
    # shellcheck disable=SC2034
    debug=true
    ;;
  *)
    printError "Invalid option specified."
    ;;
  esac
  shift
done

JSON_VULNERABILITIES_URL="https://raw.githubusercontent.com/ZOSOpenTools/meta/main/docs/api/zopen_vulnerability.json"

downloadCVEJSONCache()
{
  cachedir="${ZOPEN_ROOTFS}/var/cache/zopen"
  [ ! -e "${cachedir}" ] && mkdir -p "${cachedir}"
  JSON_CVE_CACHE="${cachedir}/zopen_vulnerability.json"

  if ! curlout=$(curlCmd -L --fail --no-progress-meter -o "${JSON_CVE_CACHE}" "${JSON_VULNERABILITIES_URL}"); then
    printError "Failed to obtain vulnerability json from ${JSON_VULNERABILITIES_URL}; ${curlout}"
  fi
  chtag -tc 819 "${JSON_CVE_CACHE}"
}

downloadCVEJSONCache

if [ ! -f "${JSON_CVE_CACHE}" ]; then
  printError "Vulnerability json cache file not found."
  exit 1
fi
printVerbose "Obtained vulnerability json cache."

# Store vulnerability counts
total_vulns=0
low_vulns=0
moderate_vulns=0
high_vulns=0
critical_vulns=0

# Check for CVEs in all installed projects
installedPackages=$(cd "${ZOPEN_PKGINSTALL}" && zosfind ./*/. ! -name . -prune -type l)
printVerbose "Found all installed packages."

printHeader "Scanning for vulnerabilities..."

# List of all upgradable packages installed on system
all_upgradable=""
if ${try_resolve}; then
  all_upgradable="$(${MYDIR}/zopen-query --installed --upgradable --no-header --no-version)"
fi
# List of packages with vulns that are upgradable
upgradable_vuln_pkgs=""

while IFS= read -r repo; do
  repo="${repo##*/}"
  pkghome="${ZOPEN_PKGINSTALL}/${repo}/${repo}"
  printVerbose "Processing '${repo}'"

  if [ ! -e "${pkghome}/.active" ]; then
    printVerbose "Skipping: Symlink '${repo}' in '${ZOPEN_PKGINSTALL}' is not active"
    continue
  fi

  if [ ! -f "${pkghome}/metadata.json" ]; then
    printVerbose "Skipping: Need the metadata.json to obtain the community's commit sha"
    continue
  fi

  release=$(jq -er '.product.release' "${pkghome}/metadata.json")
  if [ $? -gt 0 ]; then
    printVerbose "No release timestamp in $repo"
    continue
  fi

  # Fetch CVEs using the release timestamp from the vulnerabilities JSON
  cves=$(jq -cer 'if .["'$repo'"] then .["'$repo'"] | .["'$release'"] | .CVEs? // [] | .[] | [.severity, .id, .details] | @tsv else empty end' $JSON_CVE_CACHE)

  if [ $? -gt 0 ] || [ -z "$cves" ]; then
    continue
  fi

  # If this package is upgradable, add to list of upgradable pkgs with vulns
  if ${try_resolve}; then
    while IFS= read -r pkg; do
      if [ $pkg = $repo ]; then
        upgradable_vuln_pkgs="${upgradable_vuln_pkgs}\n${repo}"
        break
      fi
    done << UPGRADABLE
$(printf "%s\n" "$all_upgradable")
UPGRADABLE
  fi

  # Iterate through CVEs if any are found
  while IFS="$(echo t | tr t \\t)" read -r severity id details; do
    printHeader "${severity} severity found for $repo:"
    echo "$id"
    echo "$details"
    echo ""

    total_vulns=$((total_vulns + 1))
    case "$severity" in
      "LOW")
        low_vulns=$((low_vulns + 1))
        ;;
      "MEDIUM")
        moderate_vulns=$((moderate_vulns + 1))
        ;;
      "HIGH")
        high_vulns=$((high_vulns + 1))
        ;;
      "CRITICAL")
        critical_vulns=$((critical_vulns + 1))
        ;;
    esac
  done << CVES
$(printf "%s\n" "$cves")
CVES
done << EOF
$(printf "%s\n" "$installedPackages")
EOF

# Print summary
printHeader "CVE Summary:"
echo "${total_vulns} vulnerabilities (${low_vulns} low, ${moderate_vulns} moderate, ${high_vulns} high, ${critical_vulns} critical)"

# If try resolve flag is used, present the option to upgrade packages with vulns
if ${try_resolve}; then
  echo "Newer versions are available for the following packages with vulnerabilities: ${upgradable_vuln_pkgs}"

  yes_upgrade=false
  while true; do
    read -p "Would you like to upgrade these packages? y/n " yn
    case $yn in
      [Yy]* )
        yes_upgrade=true
        break
        ;;
      [Nn]* )
        break
        ;;
      * )
        echo "Please answer y or n."
        ;;
    esac
  done

  if [ ${try_resolve} = false ]; then
    echo "No packages upgraded."
    exit
  fi
fi
